# Read coord.json for the coordinates of max and min for plot
coord = JSON.parsefile("coord.json")
coord_constraint = Coord.cartesian(xmin=coord["xmin"], xmax=coord["xmax"], ymin=coord["ymin"], ymax=coord["ymax"], fixed=true)

p = plot(pool, x=:x1, y=:x2, color=:y, Geom.point, Scale.color_discrete, coord_constraint)
draw(SVGJS("data.svg"), p)
p


function enum_plot(m)
  best_subset = DataFrame(jsontable(enum_results.subset[m]))
  best_d = enum_results.d[m]
  best_subset.id = 1:size(best_subset, 1)
  best_subset.y = -best_subset.y .- 1
  return plot(
    layer(best_subset, x=:x1, y=:x2, color=:y, size=:id, Geom.point, Theme(alphas=[0.7])),
    layer(pool, x=:x1, y=:x2, color=:y, Geom.point),
    Guide.title("Enumeration: Best Teaching Set vs Pool: m = $m, d = $best_d"),
    Scale.color_discrete,
    coord_constraint
  )
end

for m in 1:enum_upper
  p = enum_plot(m)
  draw(SVGJS("enum_m$m.svg"), p)
  display(p)
end



p = plot(
  layer(selected_pool, x=:x1, y=:x2, color=:y, size=:id, Geom.point, Theme(alphas=[0.7])),
  layer(pool, x=:x1, y=:x2, color=:y, Geom.point),
  Guide.title("Greedy: Last Teaching Set vs Pool: m = $greedy_upper, d = $last_d"),
  Scale.color_discrete,
  coord_constraint
)
draw(SVGJS("greedy_m$greedy_upper.svg"), p)
p

    dist = [sqrt(sum((train_x[j, ] - test_x[i, ]) ^ 2)) for j in 1:size(train_x, 1)]
    knn = sortperm(dist)[1:k]
    test_y[i] = mode(train_y[knn])



##

train_x = [
  0.0 0.0;
  0.0 1.0;
  1.0 0.0;
  1.0 1.0;
]
train_y = [0, 1, 1, 0]
test_x = [
  0.0 0.0;
  0.0 0.9;
  1.0 0.0;
  1.0 1.0;
  1.0 1.0;
]
test_y = knn_classifier(train_x, train_y, test_x, 1)

sum((train_x .- test_x') .^ 2, dims=2)
# knn = sortperm(dis[:])[1:2]

##
